String formatBytes(size_t bytes) { // convert sizes in bytes to KB and MB
    if (bytes < 1024) {
      return String(bytes) + "B";
    } else if (bytes < (1024 * 1024)) {
      return String(bytes / 1024.0) + "KB";
    } else if (bytes < (1024 * 1024 * 1024)) {
      return String(bytes / 1024.0 / 1024.0) + "MB";
    }
  }

  String getContentType(String filename) { // determine the filetype of a given filename, based on the extension
    if (filename.endsWith(".html")) return "text/html";
    else if (filename.endsWith(".css")) return "text/css";
    else if (filename.endsWith(".js")) return "application/javascript";
    else if (filename.endsWith(".ico")) return "image/x-icon";
    else if (filename.endsWith(".gz")) return "application/x-gzip";
    return "text/plain";
  }

  void setHue(int hue) { // Set the RGB LED to a given hue (color) (0째 = Red, 120째 = Green, 240째 = Blue)
    hue %= 360;                   // hue is an angle between 0 and 359째
    float radH = hue*3.142/180;   // Convert degrees to radians
    float rf, gf, bf;

    if(hue>=0 && hue<120){        // Convert from HSI color space to RGB
      rf = cos(radH*3/4);
      gf = sin(radH*3/4);
      bf = 0;
    } else if(hue>=120 && hue<240){
      radH -= 2.09439;
      gf = cos(radH*3/4);
      bf = sin(radH*3/4);
      rf = 0;
    } else if(hue>=240 && hue<360){
      radH -= 4.188787;
      bf = cos(radH*3/4);
      rf = sin(radH*3/4);
      gf = 0;
    }
    int r = rf*rf*1023;
    int g = gf*gf*1023;
    int b = bf*bf*1023;

    analogWrite(LED_RED,   r);    // Write the right color to the LED output pins
    analogWrite(LED_GREEN, g);
    analogWrite(LED_BLUE,  b);
  }